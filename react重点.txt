前端分为三大框架

angular react vue
原生js本身操作dom很消耗性能
库和框架是一个意思么？
库
封装了js 思想还是在js上，高度的封装了原生js
jquery/zepto
框架
http://xy.cnhsi.com.cn/page.aspx
本质上修改了思想 -解决了一些终端程序上的问题
angular react vue

angular 1.x mvc
		2.x mvvm

		我都给你限制了
		$http -> ajax

vue2	mvvm框架
		不限制
		推荐
		vue-resource
		axios
		xmlhttp

react   更专注于view层


react
	优势：
	1.虚拟dom
	2.性能性很高
	3.解决一些终端的问题（pc、移动端问题）

	劣势：
	1.学习成本很高、学习曲线很陡
	2.react本身能做的事并不多，想做大东西必须得用react插件（全家桶）

vue2.x的迭代的时候
	虚拟dom


react
上手难度高
学习曲线陡

理解作者思想 接受它的世界观
接受它的中二设定
自定义语法 - jsx

js - string
let a = '<div>hello react!</div>'

jsx
let a = <div>hello react!</div>

1.书写格式 ：
1个标签的书写格式
	let a = <div>hello react!</div>
多个标签的书写格式 - 外面必须包一层根元素
*vue2.x 组件 根元素
	let a = <div><div>sadasd</div><span>asdasd</span></div>

	3.可以自由缩进
	let a = <div>
				<div>sadasd</div>
				<span>asdasd</span>
			</div>
		允许加括号
	let a = (<div>
				<div>sadasd</div>
				<span>asdasd</span>
			</div>)

	4.单标签规则 - 必须闭合
		<img/>
		<input/>
		<br/>
		<div></div>
	5.class - className
		<div className='aaa'></div>

	6.jsx里面使用js代码{}
		var a = 'hello react!';
		let b = <div>{a}</div>

react 开发模式
	1.直接引入 - 简单（初学者喜欢的模式）
	<script src='react.js'></script>
	2.脚手架模式（基于webpack）


中二设定
react.js - 核心js
react-dom.js - 虚拟dom
babel ？ jsx

react.js
bower - js所有的框架库包管理器 

bower - 依赖于node.js

安装bower npm install bower -g

bower info（信息）
	  install（下载）

react 2011-10-26T17:46:22.746Z    facebook
vue 2013-12-07T06:09:48.297Z      中国的大神
angular 2012-03-28T11:40:22.074Z  Google

bower install react -》 默认下载最高版本 
指定某个版本 
#15.6.1 
16.0.1 o

18.0.1 x
react-dom -> ReactDOM.render(
	组件（内容、元素），
	放到哪
);

jsx - 支持style - 里面使用json
{{'background':'red'}}
第一层是使用告诉jsx我要用js了
第二层的是json的

7.事件
使用驼峰命名法 单词的首字母大写
第一个单词之后的首字母大写
onclick -> onClick
onmouseover -> onMouseOver
----------------------------------------
ReactDOM.render(jsx（组件、内容），放到哪)

面向对象 - 
js 两种面向对象

1.es6之前那种 函数 -new 函数 = 类
类 - constructor
原型 - prototype （所谓的方法）
原型链 - __proto__

2.es6=class
constructor - 默认执行的函数
不支持变量提升

class 函数名称
函数调用时 默认执行 constructor 函数
constructor - 里面写一些初始的内容

原型就是 和 constructor 同级的函数即可

继承 extends 可以继承原型和私有属性
如果子类想使用 this
子类constructor 放入super 
参数如果想使用 子类参数放入 constructor 和 super 中

react 组件

class 自定义名字 extends React.Component{
	render(){
		return (要渲染的内容)
	}
}

组件的名字 首字母大写
es6 类 +jsx 语言 =

标签 属性 参数
<div class='aaa'></div>

标签上传的参数 如何在组件获取 
props
只能读 不能写


js改变this指向
1.call
 -1.第一个参数可以改变函数的this
 -2.从第一个参数之后的参数就是对应函数的行参
 -3.函数会默认直接调用
2.apply
	-1.第一个参数可以改变函数的this
	-2.第二个参数是一个数组对象，数组对象的内容就是对应函数的行参
	-3.函数会默认直接调用
3.bind
 -1.第一个参数可以改变函数的this
 -2.从第一个参数之后的参数就是对应函数的行参
 -3.函数不会默认调用


read only 只读
只能读 不能写


------------------------------------
state - 状态可以改变
数据可以渲染
	json 改变数据的方式 不会进行渲染
	setState view层进行渲染

隐藏显示

-----------------
小练习：
1.数字时钟
	-1.年月日 时分秒
	o
2.加减数字框
	-1 用到了 属性
	<Number min=0 max=15>

-------------------------------------
做一个 vue ng 双向绑定
input <-> 一旦改变内容 - 触发一个函数 - 函数改变state的msg （setState）
<span></span>

//react = 获取元素的内容

获取元素起码有三种方法

获取非本身元素
1) <input ref='leo'/>
获取：this.refs.leo

获取本身事件源
2）e.target

原生的获取方法
3)
query
byid
byclass
bytagname
byname

react - vue、ng不同的一点 react不限制你的使用方式


拖拽
-------------------------------------
react - 生命周期
简单来说 - react Component通过定了几个函数来控制各个阶段的动作。

componentWillMount 组件挂载前（组件渲染前）
1.找不到元素
2.属性、状态允许使用

componentDidMount 组件挂载后（组件渲染后）
1.可以找到元素
2.属性、状态允许使用

componentWillUpdate 组件更新前 

componentDidUpdate 组件更新后

componentWillUnmount 组件卸载之前


事件冒泡

react - 
//return false;
//e.stopPropagation();
//e.cancelBubble = true;
//e.nativeEvent.cancelBubble = true;
都不好使

e <-react封装过的
nativeEvent 原生的事件对象


e.nativeEvent.stopImmediatePropagation()
停止立即的传播



-----------------------------------------
表单:
放在form里面的就是表单
input
受控表单/非受控表单
受控 value=''  checkbox 
defaultValue='' 
defaultChecked=''


---------------------------------
交互
并不限制你如何的去交互
angular - $http
vue - re....
react - jquery/zepto/axios/fetch/ajax....

虚拟dom 每一个内容都应该有自己的唯一标识
key

XHMLHttpRequest -
jquery          -
zepto           -
axios           -
fetch           -
-----------------------------------------
sublime -> mac command + shift + p
		   win ctrl + shift + p

		   install => install package

		   右下角设置 babel -> javascript(babel)

jsx -> {js语法}

函数允许调用组件 组件也可以调用函数
{函数名()}

组件：深度重复调用

组件嵌套

随机 - Math.random();
rgb(1-255,1-255,1-255);

子组件拿父组件的数据 
<Child msg={父组件的数据}/>
this.props.msg

默认情况下 父组件从新渲染 会统一同步
不想同步 就存成一个state


<Child fn={父组件的一个函数.bind(this)};
子组件里面执行函数
this.props.fn(传入子组件的数据)


组件-> Water min=0 max=0 高于多少度 水就烧开了

-------------------------------------------------
1.tab面板 选项卡

上面的按钮
下面的div
自动选项卡

tabJson = {
	topValue:['aaa','bbb','ccc'],
	bottomValue:['a的内容','b的内容','c的内容'],
	timer:2000
};
下面的内容会随着上面的多少而定义

组件嵌套

2.百度jsonp 搜索 
跨域

https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=3&cb=leo


---------------------
1.高级选项卡

1.大图
2.文字
3.大小
4.缩略图
5.左右按钮

联系

点击缩略图 - 大图就转到该缩略
文字介绍

脑子中设计组件分布
top - 1、5
center - 2、3
bottom - 4、5

组件 
写起来费劲 
用起来很爽

数据格式
myJson = {
	Pic:['1.jpg'....''6.jpg''],
	text:['asdas','sdaa']
}

index>3 +1 100


-----------------
react有两种使用方法
1.（初级）引入
2.webpack 如何去配置咱们的react

webpack 是基于node 
必须有node才能使用webpack
webpack就是node里面的一个包

如何使用webpack 去配置 react
webpack —— 模块加载器 
包管理器-npm cnpm bower yarn

如何使用：
https://npm.taobao.org/package/webpack

官方网站：
https://webpack.js.org/

使用webpack 之前 安装两个命令环境
cnpm(npm) i(install) webpack -g
cnpm(npm) i(install) webpack-dev-server -g

验证

webpack -v
webpack-dev-server -v  

------------------------------------------
webpack组成
	a).入口、出口
	b).loader(加载器、转换器)
	c).plugins（插件）

------------------------------------------
需要一个配置文件 webpack.config.js 配置webpack的一个具体内容
终端命令 touch webpack.config.js
module.exports={
	entry:'./index.js', //入口文件 自己写的文件
	output:{
		filename:'bundle.js' //出口文件 打包好的文件
	}
}

------------------------------------------
运行webpack 在webpack.config.js 文件里面
	webpack 打包一次
	webpack -w (watch) 持续监听，并且打包
	webpack -p 压缩打包
	webpack -pw 持续监听并且压缩打包

------------------------------------------------------
自动支持es6的模块语法

引入
import {nnnnn,b as kkkk} from './a'
console.log(nnnnn,kkkk);

导出

const a=12;
const b=5;

export{a as nnnnn,b};

对象的导入导出

导入
import json from './a'
console.log(json.a,json.b);

导出
export default{
	a:5,
	b:3
}

小练习


-------------------------------
devDependencies - 开发所需要的模块

--save-dev -D
install i css-loader style-loader

配置
module:{
	rules:[{
		test:/\.css$/,
		use:['style-loader','css-loader']
	}]
}
--------------------------------
react - JSX语法进行在webpack支持
--------------------------------

react
react-dom
babel o

配置babel:
babel-core
babel-loader
babel-preset-es2015

隐藏文件
Command+shift+.
显示文件夹隐藏文件

预设
	.babelrc

--------------------------------
配置react
--------------------------------

react
react-dom

babel-preset-react
react-hot-loader


module.exports={
	entry:'./index.js',
	output:{
		filename:'bundle.js'
	},
	module:{
		rules:[{
			test:/\.css$/,
			use:['style-loader','css-loader']
		},
		{
			test:/\.js$/,
			use:['react-hot-loader','babel-loader'],
			exclude:/node_modules/
		}
		]
	}
}


-----------------------
1.生产环境 - webpack -pw
2.开发环境 - webpack-dev-server

安装 环境-全局安装
cnpm install webpack-dev-server -g


webpack-dev-server --port 2717

devServer:{
	contentBase:'./app',指定服务器文件目录
	inline:true,//自动刷新
	port:1289 //改变端口,
	open:true 默认打开浏览器
},
--------------------------
react - 脚手架
webpack - 配置 相当麻烦
配置麻烦 用起来爽

脚手架-人家帮咱们配置好了 就差咱们自己写身体的部分

环境 - 先安装node
node<-

安装
(c)npm install -g create-react-app

验证
create-react-app --version

如果告诉你版本号了
这事安装成功了

如何使用



public - index.html root html

src - app.js <-所有的组件 往里面扔
app.js 汇总组件-> index.js 渲染-> index.html

图片展示tab
<Tab/>
<div>
	<ul>
		<li><img src=></li>
	</ul>
	<ol>
	</ol>
</div>


tabJson = {
	picUrl:['1.jpeg','2.jpeg','3.jpeg'],
	timer:2000
}


react-router官网
https://reacttraining.com/react-router/



redux官网
https://redux.js.org/introduction/getting-started

















